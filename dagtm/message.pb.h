// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace cgl {
namespace pviz {
namespace rpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class Position;
class PvizMessage;

enum PvizMessage_mtype {
  PvizMessage_mtype_DATA = 0,
  PvizMessage_mtype_SYNC = 1,
  PvizMessage_mtype_FIN = 2
};
bool PvizMessage_mtype_IsValid(int value);
const PvizMessage_mtype PvizMessage_mtype_mtype_MIN = PvizMessage_mtype_DATA;
const PvizMessage_mtype PvizMessage_mtype_mtype_MAX = PvizMessage_mtype_FIN;
const int PvizMessage_mtype_mtype_ARRAYSIZE = PvizMessage_mtype_mtype_MAX + 1;

const ::google::protobuf::EnumDescriptor* PvizMessage_mtype_descriptor();
inline const ::std::string& PvizMessage_mtype_Name(PvizMessage_mtype value) {
  return ::google::protobuf::internal::NameOfEnum(
    PvizMessage_mtype_descriptor(), value);
}
inline bool PvizMessage_mtype_Parse(
    const ::std::string& name, PvizMessage_mtype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PvizMessage_mtype>(
    PvizMessage_mtype_descriptor(), name, value);
}
// ===================================================================

class Position : public ::google::protobuf::Message {
 public:
  Position();
  virtual ~Position();
  
  Position(const Position& from);
  
  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();
  
  void Swap(Position* other);
  
  // implements Message ----------------------------------------------
  
  Position* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);
  
  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);
  
  // required double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);
  
  // @@protoc_insertion_point(class_scope:cgl.pviz.rpc.Position)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double x_;
  double y_;
  double z_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static Position* default_instance_;
};
// -------------------------------------------------------------------

class PvizMessage : public ::google::protobuf::Message {
 public:
  PvizMessage();
  virtual ~PvizMessage();
  
  PvizMessage(const PvizMessage& from);
  
  inline PvizMessage& operator=(const PvizMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PvizMessage& default_instance();
  
  void Swap(PvizMessage* other);
  
  // implements Message ----------------------------------------------
  
  PvizMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvizMessage& from);
  void MergeFrom(const PvizMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PvizMessage_mtype mtype;
  static const mtype DATA = PvizMessage_mtype_DATA;
  static const mtype SYNC = PvizMessage_mtype_SYNC;
  static const mtype FIN = PvizMessage_mtype_FIN;
  static inline bool mtype_IsValid(int value) {
    return PvizMessage_mtype_IsValid(value);
  }
  static const mtype mtype_MIN =
    PvizMessage_mtype_mtype_MIN;
  static const mtype mtype_MAX =
    PvizMessage_mtype_mtype_MAX;
  static const int mtype_ARRAYSIZE =
    PvizMessage_mtype_mtype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  mtype_descriptor() {
    return PvizMessage_mtype_descriptor();
  }
  static inline const ::std::string& mtype_Name(mtype value) {
    return PvizMessage_mtype_Name(value);
  }
  static inline bool mtype_Parse(const ::std::string& name,
      mtype* value) {
    return PvizMessage_mtype_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .cgl.pviz.rpc.PvizMessage.mtype Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::cgl::pviz::rpc::PvizMessage_mtype type() const;
  inline void set_type(::cgl::pviz::rpc::PvizMessage_mtype value);
  
  // required int64 Timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);
  
  // required int64 Stepid = 3;
  inline bool has_stepid() const;
  inline void clear_stepid();
  static const int kStepidFieldNumber = 3;
  inline ::google::protobuf::int64 stepid() const;
  inline void set_stepid(::google::protobuf::int64 value);
  
  // repeated int32 Labels = 4;
  inline int labels_size() const;
  inline void clear_labels();
  static const int kLabelsFieldNumber = 4;
  inline ::google::protobuf::int32 labels(int index) const;
  inline void set_labels(int index, ::google::protobuf::int32 value);
  inline void add_labels(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      labels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_labels();
  
  // repeated .cgl.pviz.rpc.Position Positions = 5;
  inline int positions_size() const;
  inline void clear_positions();
  static const int kPositionsFieldNumber = 5;
  inline const ::cgl::pviz::rpc::Position& positions(int index) const;
  inline ::cgl::pviz::rpc::Position* mutable_positions(int index);
  inline ::cgl::pviz::rpc::Position* add_positions();
  inline const ::google::protobuf::RepeatedPtrField< ::cgl::pviz::rpc::Position >&
      positions() const;
  inline ::google::protobuf::RepeatedPtrField< ::cgl::pviz::rpc::Position >*
      mutable_positions();
  
  // @@protoc_insertion_point(class_scope:cgl.pviz.rpc.PvizMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_stepid();
  inline void clear_has_stepid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int64 stepid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > labels_;
  ::google::protobuf::RepeatedPtrField< ::cgl::pviz::rpc::Position > positions_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static PvizMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// Position

// required double x = 1;
inline bool Position::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Position::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Position::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Position::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Position::x() const {
  return x_;
}
inline void Position::set_x(double value) {
  set_has_x();
  x_ = value;
}

// required double y = 2;
inline bool Position::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Position::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Position::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Position::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Position::y() const {
  return y_;
}
inline void Position::set_y(double value) {
  set_has_y();
  y_ = value;
}

// required double z = 3;
inline bool Position::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Position::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Position::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Position::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Position::z() const {
  return z_;
}
inline void Position::set_z(double value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// PvizMessage

// required .cgl.pviz.rpc.PvizMessage.mtype Type = 1;
inline bool PvizMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvizMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvizMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvizMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::cgl::pviz::rpc::PvizMessage_mtype PvizMessage::type() const {
  return static_cast< ::cgl::pviz::rpc::PvizMessage_mtype >(type_);
}
inline void PvizMessage::set_type(::cgl::pviz::rpc::PvizMessage_mtype value) {
  GOOGLE_DCHECK(::cgl::pviz::rpc::PvizMessage_mtype_IsValid(value));
  set_has_type();
  type_ = value;
}

// required int64 Timestamp = 2;
inline bool PvizMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvizMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvizMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvizMessage::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 PvizMessage::timestamp() const {
  return timestamp_;
}
inline void PvizMessage::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required int64 Stepid = 3;
inline bool PvizMessage::has_stepid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvizMessage::set_has_stepid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvizMessage::clear_has_stepid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvizMessage::clear_stepid() {
  stepid_ = GOOGLE_LONGLONG(0);
  clear_has_stepid();
}
inline ::google::protobuf::int64 PvizMessage::stepid() const {
  return stepid_;
}
inline void PvizMessage::set_stepid(::google::protobuf::int64 value) {
  set_has_stepid();
  stepid_ = value;
}

// repeated int32 Labels = 4;
inline int PvizMessage::labels_size() const {
  return labels_.size();
}
inline void PvizMessage::clear_labels() {
  labels_.Clear();
}
inline ::google::protobuf::int32 PvizMessage::labels(int index) const {
  return labels_.Get(index);
}
inline void PvizMessage::set_labels(int index, ::google::protobuf::int32 value) {
  labels_.Set(index, value);
}
inline void PvizMessage::add_labels(::google::protobuf::int32 value) {
  labels_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PvizMessage::labels() const {
  return labels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PvizMessage::mutable_labels() {
  return &labels_;
}

// repeated .cgl.pviz.rpc.Position Positions = 5;
inline int PvizMessage::positions_size() const {
  return positions_.size();
}
inline void PvizMessage::clear_positions() {
  positions_.Clear();
}
inline const ::cgl::pviz::rpc::Position& PvizMessage::positions(int index) const {
  return positions_.Get(index);
}
inline ::cgl::pviz::rpc::Position* PvizMessage::mutable_positions(int index) {
  return positions_.Mutable(index);
}
inline ::cgl::pviz::rpc::Position* PvizMessage::add_positions() {
  return positions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cgl::pviz::rpc::Position >&
PvizMessage::positions() const {
  return positions_;
}
inline ::google::protobuf::RepeatedPtrField< ::cgl::pviz::rpc::Position >*
PvizMessage::mutable_positions() {
  return &positions_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace pviz
}  // namespace cgl

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cgl::pviz::rpc::PvizMessage_mtype>() {
  return ::cgl::pviz::rpc::PvizMessage_mtype_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
